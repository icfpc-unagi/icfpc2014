#ifndef GHOST_AI_FRIGHTYOKUDAI_H_
#define GHOST_AI_FRIGHTYOKUDAI_H_

#include "ghost/ghost.h"

#include <glog/logging.h>

namespace ghost {

class frightyokudaiGhost : public Ghost {
  void Run() override {
    ResetTick();
pc000: if (Tick()) return;
    register_pc_ = 0;
    VLOG(3) << "[0] INT 1";
    INT1();
pc001: if (Tick()) return;
    register_pc_ = 1;
    VLOG(3) << "[1] MOV e,a";
    MOV(register_e_, register_a_);
pc002: if (Tick()) return;
    register_pc_ = 2;
    VLOG(3) << "[2] MOV f,b";
    MOV(register_f_, register_b_);
pc003: if (Tick()) return;
    register_pc_ = 3;
    VLOG(3) << "[3] INT 3";
    INT3();
pc004: if (Tick()) return;
    register_pc_ = 4;
    VLOG(3) << "[4] MOV [0],a";
    MOV(Memory(0), register_a_);
pc005: if (Tick()) return;
    register_pc_ = 5;
    VLOG(3) << "[5] INT 5";
    INT5();
pc006: if (Tick()) return;
    register_pc_ = 6;
    VLOG(3) << "[6] MOV g,a";
    MOV(register_g_, register_a_);
pc007: if (Tick()) return;
    register_pc_ = 7;
    VLOG(3) << "[7] MOV h,b";
    MOV(register_h_, register_b_);
pc008: if (Tick()) return;
    register_pc_ = 8;
    VLOG(3) << "[8] INT 3";
    INT3();
pc009: if (Tick()) return;
    register_pc_ = 9;
    VLOG(3) << "[9] INT 6";
    INT6();
pc010: if (Tick()) return;
    register_pc_ = 10;
    VLOG(3) << "[10] MOV [3],b";
    MOV(Memory(3), register_b_);
pc011: if (Tick()) return;
    register_pc_ = 11;
    VLOG(3) << "[11] ADD [3],2";
    ADD(Memory(3), 2);
pc012: if (Tick()) return;
    register_pc_ = 12;
    VLOG(3) << "[12] JLT 15,[3],4";
    if (JLT(Memory(3), 4)) goto pc015;
pc013: if (Tick()) return;
    register_pc_ = 13;
    VLOG(3) << "[13] SUB [3],4";
    SUB(Memory(3), 4);
pc014: if (Tick()) return;
    register_pc_ = 14;
    VLOG(3) << "[14] MOV [4],a";
    MOV(Memory(4), register_a_);
pc015: if (Tick()) return;
    register_pc_ = 15;
    VLOG(3) << "[15] MOV [1],[3]";
    MOV(Memory(1), Memory(3));
pc016: if (Tick()) return;
    register_pc_ = 16;
    VLOG(3) << "[16] MOV c,0";
    MOV(register_c_, 0);
pc017: if (Tick()) return;
    register_pc_ = 17;
    VLOG(3) << "[17] MOV d,10";
    MOV(register_d_, 10);
pc018: if (Tick()) return;
    register_pc_ = 18;
    VLOG(3) << "[18] MOV a,g";
    MOV(register_a_, register_g_);
pc019: if (Tick()) return;
    register_pc_ = 19;
    VLOG(3) << "[19] MOV b,h";
    MOV(register_b_, register_h_);
pc020: if (Tick()) return;
    register_pc_ = 20;
    VLOG(3) << "[20] SUB b,1";
    SUB(register_b_, 1);
pc021: if (Tick()) return;
    register_pc_ = 21;
    VLOG(3) << "[21] INT 7";
    INT7();
pc022: if (Tick()) return;
    register_pc_ = 22;
    VLOG(3) << "[22] JEQ 38,a,0";
    if (JEQ(register_a_, 0)) goto pc038;
pc023: if (Tick()) return;
    register_pc_ = 23;
    VLOG(3) << "[23] JEQ 38,[3],0";
    if (JEQ(Memory(3), 0)) goto pc038;
pc024: if (Tick()) return;
    register_pc_ = 24;
    VLOG(3) << "[24] JEQ 28,[4],1";
    if (JEQ(Memory(4), 1)) goto pc028;
pc025: if (Tick()) return;
    register_pc_ = 25;
    VLOG(3) << "[25] JGT 30,f,h";
    if (JGT(register_f_, register_h_)) goto pc030;
pc026: if (Tick()) return;
    register_pc_ = 26;
    VLOG(3) << "[26] ADD d,22";
    ADD(register_d_, 22);
pc027: if (Tick()) return;
    register_pc_ = 27;
    VLOG(3) << "[27] JEQ 30,a,a";
    if (JEQ(register_a_, register_a_)) goto pc030;
pc028: if (Tick()) return;
    register_pc_ = 28;
    VLOG(3) << "[28] JLT 30,f,h";
    if (JLT(register_f_, register_h_)) goto pc030;
pc029: if (Tick()) return;
    register_pc_ = 29;
    VLOG(3) << "[29] ADD d,22";
    ADD(register_d_, 22);
pc030: if (Tick()) return;
    register_pc_ = 30;
    VLOG(3) << "[30] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc031: if (Tick()) return;
    register_pc_ = 31;
    VLOG(3) << "[31] ADD a,0";
    ADD(register_a_, 0);
pc032: if (Tick()) return;
    register_pc_ = 32;
    VLOG(3) << "[32] AND a,1";
    AND(register_a_, 1);
pc033: if (Tick()) return;
    register_pc_ = 33;
    VLOG(3) << "[33] JEQ 35,a,0";
    if (JEQ(register_a_, 0)) goto pc035;
pc034: if (Tick()) return;
    register_pc_ = 34;
    VLOG(3) << "[34] ADD d,1";
    ADD(register_d_, 1);
pc035: if (Tick()) return;
    register_pc_ = 35;
    VLOG(3) << "[35] JLT 38,d,c";
    if (JLT(register_d_, register_c_)) goto pc038;
pc036: if (Tick()) return;
    register_pc_ = 36;
    VLOG(3) << "[36] MOV [1],0";
    MOV(Memory(1), 0);
pc037: if (Tick()) return;
    register_pc_ = 37;
    VLOG(3) << "[37] MOV c,d";
    MOV(register_c_, register_d_);
pc038: if (Tick()) return;
    register_pc_ = 38;
    VLOG(3) << "[38] MOV d,10";
    MOV(register_d_, 10);
pc039: if (Tick()) return;
    register_pc_ = 39;
    VLOG(3) << "[39] MOV a,g";
    MOV(register_a_, register_g_);
pc040: if (Tick()) return;
    register_pc_ = 40;
    VLOG(3) << "[40] MOV b,h";
    MOV(register_b_, register_h_);
pc041: if (Tick()) return;
    register_pc_ = 41;
    VLOG(3) << "[41] ADD b,1";
    ADD(register_b_, 1);
pc042: if (Tick()) return;
    register_pc_ = 42;
    VLOG(3) << "[42] INT 7";
    INT7();
pc043: if (Tick()) return;
    register_pc_ = 43;
    VLOG(3) << "[43] JEQ 59,a,0";
    if (JEQ(register_a_, 0)) goto pc059;
pc044: if (Tick()) return;
    register_pc_ = 44;
    VLOG(3) << "[44] JEQ 59,[3],2";
    if (JEQ(Memory(3), 2)) goto pc059;
pc045: if (Tick()) return;
    register_pc_ = 45;
    VLOG(3) << "[45] JEQ 49,[4],1";
    if (JEQ(Memory(4), 1)) goto pc049;
pc046: if (Tick()) return;
    register_pc_ = 46;
    VLOG(3) << "[46] JLT 51,f,h";
    if (JLT(register_f_, register_h_)) goto pc051;
pc047: if (Tick()) return;
    register_pc_ = 47;
    VLOG(3) << "[47] ADD d,22";
    ADD(register_d_, 22);
pc048: if (Tick()) return;
    register_pc_ = 48;
    VLOG(3) << "[48] JEQ 51,a,a";
    if (JEQ(register_a_, register_a_)) goto pc051;
pc049: if (Tick()) return;
    register_pc_ = 49;
    VLOG(3) << "[49] JGT 51,f,h";
    if (JGT(register_f_, register_h_)) goto pc051;
pc050: if (Tick()) return;
    register_pc_ = 50;
    VLOG(3) << "[50] ADD d,22";
    ADD(register_d_, 22);
pc051: if (Tick()) return;
    register_pc_ = 51;
    VLOG(3) << "[51] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc052: if (Tick()) return;
    register_pc_ = 52;
    VLOG(3) << "[52] ADD a,2";
    ADD(register_a_, 2);
pc053: if (Tick()) return;
    register_pc_ = 53;
    VLOG(3) << "[53] AND a,1";
    AND(register_a_, 1);
pc054: if (Tick()) return;
    register_pc_ = 54;
    VLOG(3) << "[54] JEQ 56,a,0";
    if (JEQ(register_a_, 0)) goto pc056;
pc055: if (Tick()) return;
    register_pc_ = 55;
    VLOG(3) << "[55] ADD d,1";
    ADD(register_d_, 1);
pc056: if (Tick()) return;
    register_pc_ = 56;
    VLOG(3) << "[56] JLT 59,d,c";
    if (JLT(register_d_, register_c_)) goto pc059;
pc057: if (Tick()) return;
    register_pc_ = 57;
    VLOG(3) << "[57] MOV [1],2";
    MOV(Memory(1), 2);
pc058: if (Tick()) return;
    register_pc_ = 58;
    VLOG(3) << "[58] MOV c,d";
    MOV(register_c_, register_d_);
pc059: if (Tick()) return;
    register_pc_ = 59;
    VLOG(3) << "[59] MOV d,10";
    MOV(register_d_, 10);
pc060: if (Tick()) return;
    register_pc_ = 60;
    VLOG(3) << "[60] MOV a,g";
    MOV(register_a_, register_g_);
pc061: if (Tick()) return;
    register_pc_ = 61;
    VLOG(3) << "[61] MOV b,h";
    MOV(register_b_, register_h_);
pc062: if (Tick()) return;
    register_pc_ = 62;
    VLOG(3) << "[62] ADD a,1";
    ADD(register_a_, 1);
pc063: if (Tick()) return;
    register_pc_ = 63;
    VLOG(3) << "[63] INT 7";
    INT7();
pc064: if (Tick()) return;
    register_pc_ = 64;
    VLOG(3) << "[64] JEQ 80,a,0";
    if (JEQ(register_a_, 0)) goto pc080;
pc065: if (Tick()) return;
    register_pc_ = 65;
    VLOG(3) << "[65] JEQ 80,[3],1";
    if (JEQ(Memory(3), 1)) goto pc080;
pc066: if (Tick()) return;
    register_pc_ = 66;
    VLOG(3) << "[66] JEQ 70,[4],1";
    if (JEQ(Memory(4), 1)) goto pc070;
pc067: if (Tick()) return;
    register_pc_ = 67;
    VLOG(3) << "[67] JLT 72,e,g";
    if (JLT(register_e_, register_g_)) goto pc072;
pc068: if (Tick()) return;
    register_pc_ = 68;
    VLOG(3) << "[68] ADD d,22";
    ADD(register_d_, 22);
pc069: if (Tick()) return;
    register_pc_ = 69;
    VLOG(3) << "[69] JEQ 72,a,a";
    if (JEQ(register_a_, register_a_)) goto pc072;
pc070: if (Tick()) return;
    register_pc_ = 70;
    VLOG(3) << "[70] JGT 72,e,g";
    if (JGT(register_e_, register_g_)) goto pc072;
pc071: if (Tick()) return;
    register_pc_ = 71;
    VLOG(3) << "[71] ADD d,22";
    ADD(register_d_, 22);
pc072: if (Tick()) return;
    register_pc_ = 72;
    VLOG(3) << "[72] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc073: if (Tick()) return;
    register_pc_ = 73;
    VLOG(3) << "[73] ADD a,1";
    ADD(register_a_, 1);
pc074: if (Tick()) return;
    register_pc_ = 74;
    VLOG(3) << "[74] AND a,1";
    AND(register_a_, 1);
pc075: if (Tick()) return;
    register_pc_ = 75;
    VLOG(3) << "[75] JEQ 77,a,0";
    if (JEQ(register_a_, 0)) goto pc077;
pc076: if (Tick()) return;
    register_pc_ = 76;
    VLOG(3) << "[76] ADD d,1";
    ADD(register_d_, 1);
pc077: if (Tick()) return;
    register_pc_ = 77;
    VLOG(3) << "[77] JLT 80,d,c";
    if (JLT(register_d_, register_c_)) goto pc080;
pc078: if (Tick()) return;
    register_pc_ = 78;
    VLOG(3) << "[78] MOV [1],1";
    MOV(Memory(1), 1);
pc079: if (Tick()) return;
    register_pc_ = 79;
    VLOG(3) << "[79] MOV c,d";
    MOV(register_c_, register_d_);
pc080: if (Tick()) return;
    register_pc_ = 80;
    VLOG(3) << "[80] MOV d,10";
    MOV(register_d_, 10);
pc081: if (Tick()) return;
    register_pc_ = 81;
    VLOG(3) << "[81] MOV a,g";
    MOV(register_a_, register_g_);
pc082: if (Tick()) return;
    register_pc_ = 82;
    VLOG(3) << "[82] MOV b,h";
    MOV(register_b_, register_h_);
pc083: if (Tick()) return;
    register_pc_ = 83;
    VLOG(3) << "[83] SUB a,1";
    SUB(register_a_, 1);
pc084: if (Tick()) return;
    register_pc_ = 84;
    VLOG(3) << "[84] INT 7";
    INT7();
pc085: if (Tick()) return;
    register_pc_ = 85;
    VLOG(3) << "[85] JEQ 100,a,0";
    if (JEQ(register_a_, 0)) goto pc100;
pc086: if (Tick()) return;
    register_pc_ = 86;
    VLOG(3) << "[86] JEQ 100,[3],3";
    if (JEQ(Memory(3), 3)) goto pc100;
pc087: if (Tick()) return;
    register_pc_ = 87;
    VLOG(3) << "[87] JEQ 90,[4],1";
    if (JEQ(Memory(4), 1)) goto pc090;
pc088: if (Tick()) return;
    register_pc_ = 88;
    VLOG(3) << "[88] JGT 92,e,g";
    if (JGT(register_e_, register_g_)) goto pc092;
pc089: if (Tick()) return;
    register_pc_ = 89;
    VLOG(3) << "[89] ADD d,22";
    ADD(register_d_, 22);
pc090: if (Tick()) return;
    register_pc_ = 90;
    VLOG(3) << "[90] JLT 92,e,g";
    if (JLT(register_e_, register_g_)) goto pc092;
pc091: if (Tick()) return;
    register_pc_ = 91;
    VLOG(3) << "[91] ADD d,22";
    ADD(register_d_, 22);
pc092: if (Tick()) return;
    register_pc_ = 92;
    VLOG(3) << "[92] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc093: if (Tick()) return;
    register_pc_ = 93;
    VLOG(3) << "[93] ADD a,3";
    ADD(register_a_, 3);
pc094: if (Tick()) return;
    register_pc_ = 94;
    VLOG(3) << "[94] AND a,1";
    AND(register_a_, 1);
pc095: if (Tick()) return;
    register_pc_ = 95;
    VLOG(3) << "[95] JEQ 97,a,0";
    if (JEQ(register_a_, 0)) goto pc097;
pc096: if (Tick()) return;
    register_pc_ = 96;
    VLOG(3) << "[96] ADD d,1";
    ADD(register_d_, 1);
pc097: if (Tick()) return;
    register_pc_ = 97;
    VLOG(3) << "[97] JLT 100,d,c";
    if (JLT(register_d_, register_c_)) goto pc100;
pc098: if (Tick()) return;
    register_pc_ = 98;
    VLOG(3) << "[98] MOV [1],3";
    MOV(Memory(1), 3);
pc099: if (Tick()) return;
    register_pc_ = 99;
    VLOG(3) << "[99] MOV c,d";
    MOV(register_c_, register_d_);
pc100: if (Tick()) return;
    register_pc_ = 100;
    VLOG(3) << "[100] MOV a,[1]";
    MOV(register_a_, Memory(1));
pc101: if (Tick()) return;
    register_pc_ = 101;
    VLOG(3) << "[101] INT 0";
    INT0();
pc102: if (Tick()) return;
    register_pc_ = 102;
    VLOG(3) << "[102] MOV d,[1]";
    MOV(register_d_, Memory(1));
pc103: if (Tick()) return;
    register_pc_ = 103;
    VLOG(3) << "[103] HLT";
    HLT();
  }
};

class frightyokudaiGhostFactory : public ::GhostFactory {
 public:
  virtual ~frightyokudaiGhostFactory() {}

  std::unique_ptr<::GhostInterface> Create() {
    return std::unique_ptr<::GhostInterface>(new frightyokudaiGhost());
  }
};

}  // namespace ghost

#endif  // GHOST_AI_FRIGHTYOKUDAI_H_
