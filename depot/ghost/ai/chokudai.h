#ifndef GHOST_AI_CHOKUDAI_H_
#define GHOST_AI_CHOKUDAI_H_

#include "ghost/ghost.h"

#include <glog/logging.h>

namespace ghost {

class chokudaiGhost : public Ghost {
  void Run() override {
    ResetTick();
pc000: if (Tick()) return;
    register_pc_ = 0;
    VLOG(3) << "[0] INT 1";
    INT1();
pc001: if (Tick()) return;
    register_pc_ = 1;
    VLOG(3) << "[1] MOV e,a";
    MOV(register_e_, register_a_);
pc002: if (Tick()) return;
    register_pc_ = 2;
    VLOG(3) << "[2] MOV f,b";
    MOV(register_f_, register_b_);
pc003: if (Tick()) return;
    register_pc_ = 3;
    VLOG(3) << "[3] INT 3";
    INT3();
pc004: if (Tick()) return;
    register_pc_ = 4;
    VLOG(3) << "[4] MOV [0],a";
    MOV(Memory(0), register_a_);
pc005: if (Tick()) return;
    register_pc_ = 5;
    VLOG(3) << "[5] INT 5";
    INT5();
pc006: if (Tick()) return;
    register_pc_ = 6;
    VLOG(3) << "[6] MOV g,a";
    MOV(register_g_, register_a_);
pc007: if (Tick()) return;
    register_pc_ = 7;
    VLOG(3) << "[7] MOV h,b";
    MOV(register_h_, register_b_);
pc008: if (Tick()) return;
    register_pc_ = 8;
    VLOG(3) << "[8] INT 3";
    INT3();
pc009: if (Tick()) return;
    register_pc_ = 9;
    VLOG(3) << "[9] INT 6";
    INT6();
pc010: if (Tick()) return;
    register_pc_ = 10;
    VLOG(3) << "[10] MOV [3],b";
    MOV(Memory(3), register_b_);
pc011: if (Tick()) return;
    register_pc_ = 11;
    VLOG(3) << "[11] ADD [3],2";
    ADD(Memory(3), 2);
pc012: if (Tick()) return;
    register_pc_ = 12;
    VLOG(3) << "[12] JLT 14,[3],4";
    if (JLT(Memory(3), 4)) goto pc014;
pc013: if (Tick()) return;
    register_pc_ = 13;
    VLOG(3) << "[13] SUB [3],4";
    SUB(Memory(3), 4);
pc014: if (Tick()) return;
    register_pc_ = 14;
    VLOG(3) << "[14] MOV [1],[3]";
    MOV(Memory(1), Memory(3));
pc015: if (Tick()) return;
    register_pc_ = 15;
    VLOG(3) << "[15] MOV c,0";
    MOV(register_c_, 0);
pc016: if (Tick()) return;
    register_pc_ = 16;
    VLOG(3) << "[16] MOV d,10";
    MOV(register_d_, 10);
pc017: if (Tick()) return;
    register_pc_ = 17;
    VLOG(3) << "[17] MOV a,g";
    MOV(register_a_, register_g_);
pc018: if (Tick()) return;
    register_pc_ = 18;
    VLOG(3) << "[18] MOV b,h";
    MOV(register_b_, register_h_);
pc019: if (Tick()) return;
    register_pc_ = 19;
    VLOG(3) << "[19] SUB b,1";
    SUB(register_b_, 1);
pc020: if (Tick()) return;
    register_pc_ = 20;
    VLOG(3) << "[20] INT 7";
    INT7();
pc021: if (Tick()) return;
    register_pc_ = 21;
    VLOG(3) << "[21] JEQ 33,a,0";
    if (JEQ(register_a_, 0)) goto pc033;
pc022: if (Tick()) return;
    register_pc_ = 22;
    VLOG(3) << "[22] JEQ 33,[3],0";
    if (JEQ(Memory(3), 0)) goto pc033;
pc023: if (Tick()) return;
    register_pc_ = 23;
    VLOG(3) << "[23] JGT 25,f,h";
    if (JGT(register_f_, register_h_)) goto pc025;
pc024: if (Tick()) return;
    register_pc_ = 24;
    VLOG(3) << "[24] ADD d,22";
    ADD(register_d_, 22);
pc025: if (Tick()) return;
    register_pc_ = 25;
    VLOG(3) << "[25] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc026: if (Tick()) return;
    register_pc_ = 26;
    VLOG(3) << "[26] ADD a,0";
    ADD(register_a_, 0);
pc027: if (Tick()) return;
    register_pc_ = 27;
    VLOG(3) << "[27] AND a,1";
    AND(register_a_, 1);
pc028: if (Tick()) return;
    register_pc_ = 28;
    VLOG(3) << "[28] JEQ 30,a,0";
    if (JEQ(register_a_, 0)) goto pc030;
pc029: if (Tick()) return;
    register_pc_ = 29;
    VLOG(3) << "[29] ADD d,1";
    ADD(register_d_, 1);
pc030: if (Tick()) return;
    register_pc_ = 30;
    VLOG(3) << "[30] JLT 33,d,c";
    if (JLT(register_d_, register_c_)) goto pc033;
pc031: if (Tick()) return;
    register_pc_ = 31;
    VLOG(3) << "[31] MOV [1],0";
    MOV(Memory(1), 0);
pc032: if (Tick()) return;
    register_pc_ = 32;
    VLOG(3) << "[32] MOV c,d";
    MOV(register_c_, register_d_);
pc033: if (Tick()) return;
    register_pc_ = 33;
    VLOG(3) << "[33] MOV d,10";
    MOV(register_d_, 10);
pc034: if (Tick()) return;
    register_pc_ = 34;
    VLOG(3) << "[34] MOV a,g";
    MOV(register_a_, register_g_);
pc035: if (Tick()) return;
    register_pc_ = 35;
    VLOG(3) << "[35] MOV b,h";
    MOV(register_b_, register_h_);
pc036: if (Tick()) return;
    register_pc_ = 36;
    VLOG(3) << "[36] ADD b,1";
    ADD(register_b_, 1);
pc037: if (Tick()) return;
    register_pc_ = 37;
    VLOG(3) << "[37] INT 7";
    INT7();
pc038: if (Tick()) return;
    register_pc_ = 38;
    VLOG(3) << "[38] JEQ 50,a,0";
    if (JEQ(register_a_, 0)) goto pc050;
pc039: if (Tick()) return;
    register_pc_ = 39;
    VLOG(3) << "[39] JEQ 50,[3],2";
    if (JEQ(Memory(3), 2)) goto pc050;
pc040: if (Tick()) return;
    register_pc_ = 40;
    VLOG(3) << "[40] JLT 42,f,h";
    if (JLT(register_f_, register_h_)) goto pc042;
pc041: if (Tick()) return;
    register_pc_ = 41;
    VLOG(3) << "[41] ADD d,22";
    ADD(register_d_, 22);
pc042: if (Tick()) return;
    register_pc_ = 42;
    VLOG(3) << "[42] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc043: if (Tick()) return;
    register_pc_ = 43;
    VLOG(3) << "[43] ADD a,2";
    ADD(register_a_, 2);
pc044: if (Tick()) return;
    register_pc_ = 44;
    VLOG(3) << "[44] AND a,1";
    AND(register_a_, 1);
pc045: if (Tick()) return;
    register_pc_ = 45;
    VLOG(3) << "[45] JEQ 47,a,0";
    if (JEQ(register_a_, 0)) goto pc047;
pc046: if (Tick()) return;
    register_pc_ = 46;
    VLOG(3) << "[46] ADD d,1";
    ADD(register_d_, 1);
pc047: if (Tick()) return;
    register_pc_ = 47;
    VLOG(3) << "[47] JLT 50,d,c";
    if (JLT(register_d_, register_c_)) goto pc050;
pc048: if (Tick()) return;
    register_pc_ = 48;
    VLOG(3) << "[48] MOV [1],2";
    MOV(Memory(1), 2);
pc049: if (Tick()) return;
    register_pc_ = 49;
    VLOG(3) << "[49] MOV c,d";
    MOV(register_c_, register_d_);
pc050: if (Tick()) return;
    register_pc_ = 50;
    VLOG(3) << "[50] MOV d,10";
    MOV(register_d_, 10);
pc051: if (Tick()) return;
    register_pc_ = 51;
    VLOG(3) << "[51] MOV a,g";
    MOV(register_a_, register_g_);
pc052: if (Tick()) return;
    register_pc_ = 52;
    VLOG(3) << "[52] MOV b,h";
    MOV(register_b_, register_h_);
pc053: if (Tick()) return;
    register_pc_ = 53;
    VLOG(3) << "[53] ADD a,1";
    ADD(register_a_, 1);
pc054: if (Tick()) return;
    register_pc_ = 54;
    VLOG(3) << "[54] INT 7";
    INT7();
pc055: if (Tick()) return;
    register_pc_ = 55;
    VLOG(3) << "[55] JEQ 67,a,0";
    if (JEQ(register_a_, 0)) goto pc067;
pc056: if (Tick()) return;
    register_pc_ = 56;
    VLOG(3) << "[56] JEQ 67,[3],1";
    if (JEQ(Memory(3), 1)) goto pc067;
pc057: if (Tick()) return;
    register_pc_ = 57;
    VLOG(3) << "[57] JLT 59,e,g";
    if (JLT(register_e_, register_g_)) goto pc059;
pc058: if (Tick()) return;
    register_pc_ = 58;
    VLOG(3) << "[58] ADD d,22";
    ADD(register_d_, 22);
pc059: if (Tick()) return;
    register_pc_ = 59;
    VLOG(3) << "[59] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc060: if (Tick()) return;
    register_pc_ = 60;
    VLOG(3) << "[60] ADD a,1";
    ADD(register_a_, 1);
pc061: if (Tick()) return;
    register_pc_ = 61;
    VLOG(3) << "[61] AND a,1";
    AND(register_a_, 1);
pc062: if (Tick()) return;
    register_pc_ = 62;
    VLOG(3) << "[62] JEQ 64,a,0";
    if (JEQ(register_a_, 0)) goto pc064;
pc063: if (Tick()) return;
    register_pc_ = 63;
    VLOG(3) << "[63] ADD d,1";
    ADD(register_d_, 1);
pc064: if (Tick()) return;
    register_pc_ = 64;
    VLOG(3) << "[64] JLT 67,d,c";
    if (JLT(register_d_, register_c_)) goto pc067;
pc065: if (Tick()) return;
    register_pc_ = 65;
    VLOG(3) << "[65] MOV [1],1";
    MOV(Memory(1), 1);
pc066: if (Tick()) return;
    register_pc_ = 66;
    VLOG(3) << "[66] MOV c,d";
    MOV(register_c_, register_d_);
pc067: if (Tick()) return;
    register_pc_ = 67;
    VLOG(3) << "[67] MOV d,10";
    MOV(register_d_, 10);
pc068: if (Tick()) return;
    register_pc_ = 68;
    VLOG(3) << "[68] MOV a,g";
    MOV(register_a_, register_g_);
pc069: if (Tick()) return;
    register_pc_ = 69;
    VLOG(3) << "[69] MOV b,h";
    MOV(register_b_, register_h_);
pc070: if (Tick()) return;
    register_pc_ = 70;
    VLOG(3) << "[70] SUB a,1";
    SUB(register_a_, 1);
pc071: if (Tick()) return;
    register_pc_ = 71;
    VLOG(3) << "[71] INT 7";
    INT7();
pc072: if (Tick()) return;
    register_pc_ = 72;
    VLOG(3) << "[72] JEQ 84,a,0";
    if (JEQ(register_a_, 0)) goto pc084;
pc073: if (Tick()) return;
    register_pc_ = 73;
    VLOG(3) << "[73] JEQ 84,[3],3";
    if (JEQ(Memory(3), 3)) goto pc084;
pc074: if (Tick()) return;
    register_pc_ = 74;
    VLOG(3) << "[74] JGT 76,e,g";
    if (JGT(register_e_, register_g_)) goto pc076;
pc075: if (Tick()) return;
    register_pc_ = 75;
    VLOG(3) << "[75] ADD d,22";
    ADD(register_d_, 22);
pc076: if (Tick()) return;
    register_pc_ = 76;
    VLOG(3) << "[76] MOV a,[3]";
    MOV(register_a_, Memory(3));
pc077: if (Tick()) return;
    register_pc_ = 77;
    VLOG(3) << "[77] ADD a,3";
    ADD(register_a_, 3);
pc078: if (Tick()) return;
    register_pc_ = 78;
    VLOG(3) << "[78] AND a,1";
    AND(register_a_, 1);
pc079: if (Tick()) return;
    register_pc_ = 79;
    VLOG(3) << "[79] JEQ 81,a,0";
    if (JEQ(register_a_, 0)) goto pc081;
pc080: if (Tick()) return;
    register_pc_ = 80;
    VLOG(3) << "[80] ADD d,1";
    ADD(register_d_, 1);
pc081: if (Tick()) return;
    register_pc_ = 81;
    VLOG(3) << "[81] JLT 84,d,c";
    if (JLT(register_d_, register_c_)) goto pc084;
pc082: if (Tick()) return;
    register_pc_ = 82;
    VLOG(3) << "[82] MOV [1],3";
    MOV(Memory(1), 3);
pc083: if (Tick()) return;
    register_pc_ = 83;
    VLOG(3) << "[83] MOV c,d";
    MOV(register_c_, register_d_);
pc084: if (Tick()) return;
    register_pc_ = 84;
    VLOG(3) << "[84] MOV a,[1]";
    MOV(register_a_, Memory(1));
pc085: if (Tick()) return;
    register_pc_ = 85;
    VLOG(3) << "[85] INT 0";
    INT0();
pc086: if (Tick()) return;
    register_pc_ = 86;
    VLOG(3) << "[86] MOV d,[1]";
    MOV(register_d_, Memory(1));
pc087: if (Tick()) return;
    register_pc_ = 87;
    VLOG(3) << "[87] HLT";
    HLT();
  }
};

class chokudaiGhostFactory : public ::GhostFactory {
 public:
  virtual ~chokudaiGhostFactory() {}

  std::unique_ptr<::GhostInterface> Create() {
    return std::unique_ptr<::GhostInterface>(new chokudaiGhost());
  }
};

}  // namespace ghost

#endif  // GHOST_AI_CHOKUDAI_H_
