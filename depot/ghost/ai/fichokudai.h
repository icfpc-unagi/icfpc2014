#ifndef GHOST_AI_FICHOKUDAI_H_
#define GHOST_AI_FICHOKUDAI_H_

#include "ghost/ghost.h"

#include <glog/logging.h>

namespace ghost {

class fichokudaiGhost : public Ghost {
  void Run() override {
    ResetTick();
pc000: if (Tick()) return;
    register_pc_ = 0;
    VLOG(3) << "[0] mov a,[5]";
    MOV(register_a_, Memory(5));
pc001: if (Tick()) return;
    register_pc_ = 1;
    VLOG(3) << "[1] sub a,31";
    SUB(register_a_, 31);
pc002: if (Tick()) return;
    register_pc_ = 2;
    VLOG(3) << "[2] mov [5],a";
    MOV(Memory(5), register_a_);
pc003: if (Tick()) return;
    register_pc_ = 3;
    VLOG(3) << "[3] jgt chokudai,a,100";
    if (JGT(register_a_, 100)) goto pc018;
    // Label: fickle
pc004: if (Tick()) return;
    register_pc_ = 4;
    VLOG(3) << "[4] mov a,255";
    MOV(register_a_, 255);
pc005: if (Tick()) return;
    register_pc_ = 5;
    VLOG(3) << "[5] mov b,0";
    MOV(register_b_, 0);
pc006: if (Tick()) return;
    register_pc_ = 6;
    VLOG(3) << "[6] mov c,255";
    MOV(register_c_, 255);
    // Label: fickle_three
pc007: if (Tick()) return;
    register_pc_ = 7;
    VLOG(3) << "[7] inc c";
    INC(register_c_);
pc008: if (Tick()) return;
    register_pc_ = 8;
    VLOG(3) << "[8] jgt fickle_seven,[c],a";
    if (JGT(Memory(register_c_), register_a_)) goto pc012;
pc009: if (Tick()) return;
    register_pc_ = 9;
    VLOG(3) << "[9] mov a,[c]";
    MOV(register_a_, Memory(register_c_));
pc010: if (Tick()) return;
    register_pc_ = 10;
    VLOG(3) << "[10] mov b,c";
    MOV(register_b_, register_c_);
pc011: if (Tick()) return;
    register_pc_ = 11;
    VLOG(3) << "[11] jlt fickle_three,c,3";
    if (JLT(register_c_, 3)) goto pc007;
    // Label: fickle_seven
pc012: if (Tick()) return;
    register_pc_ = 12;
    VLOG(3) << "[12] mov a,b";
    MOV(register_a_, register_b_);
pc013: if (Tick()) return;
    register_pc_ = 13;
    VLOG(3) << "[13] int 0";
    INT0();
pc014: if (Tick()) return;
    register_pc_ = 14;
    VLOG(3) << "[14] int 3";
    INT3();
pc015: if (Tick()) return;
    register_pc_ = 15;
    VLOG(3) << "[15] int 6";
    INT6();
pc016: if (Tick()) return;
    register_pc_ = 16;
    VLOG(3) << "[16] inc [b]";
    INC(Memory(register_b_));
pc017: if (Tick()) return;
    register_pc_ = 17;
    VLOG(3) << "[17] hlt";
    HLT();
    // Label: chokudai
pc018: if (Tick()) return;
    register_pc_ = 18;
    VLOG(3) << "[18] INT 1";
    INT1();
pc019: if (Tick()) return;
    register_pc_ = 19;
    VLOG(3) << "[19] MOV e,a";
    MOV(register_e_, register_a_);
pc020: if (Tick()) return;
    register_pc_ = 20;
    VLOG(3) << "[20] MOV f,b";
    MOV(register_f_, register_b_);
pc021: if (Tick()) return;
    register_pc_ = 21;
    VLOG(3) << "[21] INT 3";
    INT3();
pc022: if (Tick()) return;
    register_pc_ = 22;
    VLOG(3) << "[22] MOV [10],a";
    MOV(Memory(10), register_a_);
pc023: if (Tick()) return;
    register_pc_ = 23;
    VLOG(3) << "[23] INT 5";
    INT5();
pc024: if (Tick()) return;
    register_pc_ = 24;
    VLOG(3) << "[24] MOV g,a";
    MOV(register_g_, register_a_);
pc025: if (Tick()) return;
    register_pc_ = 25;
    VLOG(3) << "[25] MOV h,b";
    MOV(register_h_, register_b_);
pc026: if (Tick()) return;
    register_pc_ = 26;
    VLOG(3) << "[26] INT 3";
    INT3();
pc027: if (Tick()) return;
    register_pc_ = 27;
    VLOG(3) << "[27] INT 6";
    INT6();
pc028: if (Tick()) return;
    register_pc_ = 28;
    VLOG(3) << "[28] MOV [13],b";
    MOV(Memory(13), register_b_);
pc029: if (Tick()) return;
    register_pc_ = 29;
    VLOG(3) << "[29] ADD [13],2";
    ADD(Memory(13), 2);
pc030: if (Tick()) return;
    register_pc_ = 30;
    VLOG(3) << "[30] JLT init3,[13],4";
    if (JLT(Memory(13), 4)) goto pc032;
pc031: if (Tick()) return;
    register_pc_ = 31;
    VLOG(3) << "[31] SUB [13],4";
    SUB(Memory(13), 4);
    // Label: init3
pc032: if (Tick()) return;
    register_pc_ = 32;
    VLOG(3) << "[32] MOV [11],[13]";
    MOV(Memory(11), Memory(13));
pc033: if (Tick()) return;
    register_pc_ = 33;
    VLOG(3) << "[33] MOV c,0";
    MOV(register_c_, 0);
pc034: if (Tick()) return;
    register_pc_ = 34;
    VLOG(3) << "[34] MOV d,10";
    MOV(register_d_, 10);
pc035: if (Tick()) return;
    register_pc_ = 35;
    VLOG(3) << "[35] MOV a,g";
    MOV(register_a_, register_g_);
pc036: if (Tick()) return;
    register_pc_ = 36;
    VLOG(3) << "[36] MOV b,h";
    MOV(register_b_, register_h_);
pc037: if (Tick()) return;
    register_pc_ = 37;
    VLOG(3) << "[37] SUB b,1";
    SUB(register_b_, 1);
pc038: if (Tick()) return;
    register_pc_ = 38;
    VLOG(3) << "[38] INT 7";
    INT7();
pc039: if (Tick()) return;
    register_pc_ = 39;
    VLOG(3) << "[39] JEQ uplast,a,0";
    if (JEQ(register_a_, 0)) goto pc051;
pc040: if (Tick()) return;
    register_pc_ = 40;
    VLOG(3) << "[40] JEQ uplast,[13],0";
    if (JEQ(Memory(13), 0)) goto pc051;
pc041: if (Tick()) return;
    register_pc_ = 41;
    VLOG(3) << "[41] JGT up1,f,h";
    if (JGT(register_f_, register_h_)) goto pc043;
pc042: if (Tick()) return;
    register_pc_ = 42;
    VLOG(3) << "[42] ADD d,22";
    ADD(register_d_, 22);
    // Label: up1
pc043: if (Tick()) return;
    register_pc_ = 43;
    VLOG(3) << "[43] MOV a,[13]";
    MOV(register_a_, Memory(13));
pc044: if (Tick()) return;
    register_pc_ = 44;
    VLOG(3) << "[44] ADD a,0";
    ADD(register_a_, 0);
pc045: if (Tick()) return;
    register_pc_ = 45;
    VLOG(3) << "[45] AND a,1";
    AND(register_a_, 1);
pc046: if (Tick()) return;
    register_pc_ = 46;
    VLOG(3) << "[46] JEQ up2,a,0";
    if (JEQ(register_a_, 0)) goto pc048;
pc047: if (Tick()) return;
    register_pc_ = 47;
    VLOG(3) << "[47] ADD d,1";
    ADD(register_d_, 1);
    // Label: up2
pc048: if (Tick()) return;
    register_pc_ = 48;
    VLOG(3) << "[48] JLT uplast,d,c";
    if (JLT(register_d_, register_c_)) goto pc051;
pc049: if (Tick()) return;
    register_pc_ = 49;
    VLOG(3) << "[49] MOV [11],0";
    MOV(Memory(11), 0);
pc050: if (Tick()) return;
    register_pc_ = 50;
    VLOG(3) << "[50] MOV c,d";
    MOV(register_c_, register_d_);
    // Label: uplast
pc051: if (Tick()) return;
    register_pc_ = 51;
    VLOG(3) << "[51] MOV d,10";
    MOV(register_d_, 10);
pc052: if (Tick()) return;
    register_pc_ = 52;
    VLOG(3) << "[52] MOV a,g";
    MOV(register_a_, register_g_);
pc053: if (Tick()) return;
    register_pc_ = 53;
    VLOG(3) << "[53] MOV b,h";
    MOV(register_b_, register_h_);
pc054: if (Tick()) return;
    register_pc_ = 54;
    VLOG(3) << "[54] ADD b,1";
    ADD(register_b_, 1);
pc055: if (Tick()) return;
    register_pc_ = 55;
    VLOG(3) << "[55] INT 7";
    INT7();
pc056: if (Tick()) return;
    register_pc_ = 56;
    VLOG(3) << "[56] JEQ downlast,a,0";
    if (JEQ(register_a_, 0)) goto pc068;
pc057: if (Tick()) return;
    register_pc_ = 57;
    VLOG(3) << "[57] JEQ downlast,[13],2";
    if (JEQ(Memory(13), 2)) goto pc068;
pc058: if (Tick()) return;
    register_pc_ = 58;
    VLOG(3) << "[58] JLT down1,f,h";
    if (JLT(register_f_, register_h_)) goto pc060;
pc059: if (Tick()) return;
    register_pc_ = 59;
    VLOG(3) << "[59] ADD d,22";
    ADD(register_d_, 22);
    // Label: down1
pc060: if (Tick()) return;
    register_pc_ = 60;
    VLOG(3) << "[60] MOV a,[13]";
    MOV(register_a_, Memory(13));
pc061: if (Tick()) return;
    register_pc_ = 61;
    VLOG(3) << "[61] ADD a,2";
    ADD(register_a_, 2);
pc062: if (Tick()) return;
    register_pc_ = 62;
    VLOG(3) << "[62] AND a,1";
    AND(register_a_, 1);
pc063: if (Tick()) return;
    register_pc_ = 63;
    VLOG(3) << "[63] JEQ down2,a,0";
    if (JEQ(register_a_, 0)) goto pc065;
pc064: if (Tick()) return;
    register_pc_ = 64;
    VLOG(3) << "[64] ADD d,1";
    ADD(register_d_, 1);
    // Label: down2
pc065: if (Tick()) return;
    register_pc_ = 65;
    VLOG(3) << "[65] JLT downlast,d,c";
    if (JLT(register_d_, register_c_)) goto pc068;
pc066: if (Tick()) return;
    register_pc_ = 66;
    VLOG(3) << "[66] MOV [11],2";
    MOV(Memory(11), 2);
pc067: if (Tick()) return;
    register_pc_ = 67;
    VLOG(3) << "[67] MOV c,d";
    MOV(register_c_, register_d_);
    // Label: downlast
pc068: if (Tick()) return;
    register_pc_ = 68;
    VLOG(3) << "[68] MOV d,10";
    MOV(register_d_, 10);
pc069: if (Tick()) return;
    register_pc_ = 69;
    VLOG(3) << "[69] MOV a,g";
    MOV(register_a_, register_g_);
pc070: if (Tick()) return;
    register_pc_ = 70;
    VLOG(3) << "[70] MOV b,h";
    MOV(register_b_, register_h_);
pc071: if (Tick()) return;
    register_pc_ = 71;
    VLOG(3) << "[71] ADD a,1";
    ADD(register_a_, 1);
pc072: if (Tick()) return;
    register_pc_ = 72;
    VLOG(3) << "[72] INT 7";
    INT7();
pc073: if (Tick()) return;
    register_pc_ = 73;
    VLOG(3) << "[73] JEQ rightlast,a,0";
    if (JEQ(register_a_, 0)) goto pc085;
pc074: if (Tick()) return;
    register_pc_ = 74;
    VLOG(3) << "[74] JEQ rightlast,[13],1";
    if (JEQ(Memory(13), 1)) goto pc085;
pc075: if (Tick()) return;
    register_pc_ = 75;
    VLOG(3) << "[75] JLT right1,e,g";
    if (JLT(register_e_, register_g_)) goto pc077;
pc076: if (Tick()) return;
    register_pc_ = 76;
    VLOG(3) << "[76] ADD d,22";
    ADD(register_d_, 22);
    // Label: right1
pc077: if (Tick()) return;
    register_pc_ = 77;
    VLOG(3) << "[77] MOV a,[13]";
    MOV(register_a_, Memory(13));
pc078: if (Tick()) return;
    register_pc_ = 78;
    VLOG(3) << "[78] ADD a,1";
    ADD(register_a_, 1);
pc079: if (Tick()) return;
    register_pc_ = 79;
    VLOG(3) << "[79] AND a,1";
    AND(register_a_, 1);
pc080: if (Tick()) return;
    register_pc_ = 80;
    VLOG(3) << "[80] JEQ right2,a,0";
    if (JEQ(register_a_, 0)) goto pc082;
pc081: if (Tick()) return;
    register_pc_ = 81;
    VLOG(3) << "[81] ADD d,1";
    ADD(register_d_, 1);
    // Label: right2
pc082: if (Tick()) return;
    register_pc_ = 82;
    VLOG(3) << "[82] JLT rightlast,d,c";
    if (JLT(register_d_, register_c_)) goto pc085;
pc083: if (Tick()) return;
    register_pc_ = 83;
    VLOG(3) << "[83] MOV [11],1";
    MOV(Memory(11), 1);
pc084: if (Tick()) return;
    register_pc_ = 84;
    VLOG(3) << "[84] MOV c,d";
    MOV(register_c_, register_d_);
    // Label: rightlast
pc085: if (Tick()) return;
    register_pc_ = 85;
    VLOG(3) << "[85] MOV d,10";
    MOV(register_d_, 10);
pc086: if (Tick()) return;
    register_pc_ = 86;
    VLOG(3) << "[86] MOV a,g";
    MOV(register_a_, register_g_);
pc087: if (Tick()) return;
    register_pc_ = 87;
    VLOG(3) << "[87] MOV b,h";
    MOV(register_b_, register_h_);
pc088: if (Tick()) return;
    register_pc_ = 88;
    VLOG(3) << "[88] SUB a,1";
    SUB(register_a_, 1);
pc089: if (Tick()) return;
    register_pc_ = 89;
    VLOG(3) << "[89] INT 7";
    INT7();
pc090: if (Tick()) return;
    register_pc_ = 90;
    VLOG(3) << "[90] JEQ leftlast,a,0";
    if (JEQ(register_a_, 0)) goto pc102;
pc091: if (Tick()) return;
    register_pc_ = 91;
    VLOG(3) << "[91] JEQ leftlast,[13],3";
    if (JEQ(Memory(13), 3)) goto pc102;
pc092: if (Tick()) return;
    register_pc_ = 92;
    VLOG(3) << "[92] JGT left1,e,g";
    if (JGT(register_e_, register_g_)) goto pc094;
pc093: if (Tick()) return;
    register_pc_ = 93;
    VLOG(3) << "[93] ADD d,22";
    ADD(register_d_, 22);
    // Label: left1
pc094: if (Tick()) return;
    register_pc_ = 94;
    VLOG(3) << "[94] MOV a,[13]";
    MOV(register_a_, Memory(13));
pc095: if (Tick()) return;
    register_pc_ = 95;
    VLOG(3) << "[95] ADD a,3";
    ADD(register_a_, 3);
pc096: if (Tick()) return;
    register_pc_ = 96;
    VLOG(3) << "[96] AND a,1";
    AND(register_a_, 1);
pc097: if (Tick()) return;
    register_pc_ = 97;
    VLOG(3) << "[97] JEQ left2,a,0";
    if (JEQ(register_a_, 0)) goto pc099;
pc098: if (Tick()) return;
    register_pc_ = 98;
    VLOG(3) << "[98] ADD d,1";
    ADD(register_d_, 1);
    // Label: left2
pc099: if (Tick()) return;
    register_pc_ = 99;
    VLOG(3) << "[99] JLT leftlast,d,c";
    if (JLT(register_d_, register_c_)) goto pc102;
pc100: if (Tick()) return;
    register_pc_ = 100;
    VLOG(3) << "[100] MOV [11],3";
    MOV(Memory(11), 3);
pc101: if (Tick()) return;
    register_pc_ = 101;
    VLOG(3) << "[101] MOV c,d";
    MOV(register_c_, register_d_);
    // Label: leftlast
pc102: if (Tick()) return;
    register_pc_ = 102;
    VLOG(3) << "[102] MOV a,[11]";
    MOV(register_a_, Memory(11));
pc103: if (Tick()) return;
    register_pc_ = 103;
    VLOG(3) << "[103] INT 0";
    INT0();
pc104: if (Tick()) return;
    register_pc_ = 104;
    VLOG(3) << "[104] MOV d,[11]";
    MOV(register_d_, Memory(11));
pc105: if (Tick()) return;
    register_pc_ = 105;
    VLOG(3) << "[105] HLT";
    HLT();
  }
};

class fichokudaiGhostFactory : public ::GhostFactory {
 public:
  virtual ~fichokudaiGhostFactory() {}

  std::unique_ptr<::GhostInterface> Create() {
    return std::unique_ptr<::GhostInterface>(new fichokudaiGhost());
  }
};

}  // namespace ghost

#endif  // GHOST_AI_FICHOKUDAI_H_
