#ifndef GHOST_AI_IWI5_H_
#define GHOST_AI_IWI5_H_

#include "ghost/ghost.h"

#include <glog/logging.h>

namespace ghost {

class iwi5Ghost : public Ghost {
  void Run() override {
    ResetTick();
pc000: if (Tick()) return;
    register_pc_ = 0;
    VLOG(3) << "[0] INT 1";
    INT1();
pc001: if (Tick()) return;
    register_pc_ = 1;
    VLOG(3) << "[1] MOV e,a";
    MOV(register_e_, register_a_);
pc002: if (Tick()) return;
    register_pc_ = 2;
    VLOG(3) << "[2] MOV f,b";
    MOV(register_f_, register_b_);
pc003: if (Tick()) return;
    register_pc_ = 3;
    VLOG(3) << "[3] INT 3";
    INT3();
pc004: if (Tick()) return;
    register_pc_ = 4;
    VLOG(3) << "[4] MOV [0],a";
    MOV(Memory(0), register_a_);
pc005: if (Tick()) return;
    register_pc_ = 5;
    VLOG(3) << "[5] INT 5";
    INT5();
pc006: if (Tick()) return;
    register_pc_ = 6;
    VLOG(3) << "[6] MOV g,a";
    MOV(register_g_, register_a_);
pc007: if (Tick()) return;
    register_pc_ = 7;
    VLOG(3) << "[7] MOV h,b";
    MOV(register_h_, register_b_);
pc008: if (Tick()) return;
    register_pc_ = 8;
    VLOG(3) << "[8] INT 3";
    INT3();
pc009: if (Tick()) return;
    register_pc_ = 9;
    VLOG(3) << "[9] INT 6";
    INT6();
pc010: if (Tick()) return;
    register_pc_ = 10;
    VLOG(3) << "[10] MOV [3],b";
    MOV(Memory(3), register_b_);
pc011: if (Tick()) return;
    register_pc_ = 11;
    VLOG(3) << "[11] ADD [3],2";
    ADD(Memory(3), 2);
pc012: if (Tick()) return;
    register_pc_ = 12;
    VLOG(3) << "[12] JLT 14,[3],4";
    if (JLT(Memory(3), 4)) goto pc014;
pc013: if (Tick()) return;
    register_pc_ = 13;
    VLOG(3) << "[13] SUB [3],4";
    SUB(Memory(3), 4);
pc014: if (Tick()) return;
    register_pc_ = 14;
    VLOG(3) << "[14] MOV [1],[3]";
    MOV(Memory(1), Memory(3));
pc015: if (Tick()) return;
    register_pc_ = 15;
    VLOG(3) << "[15] MOV [4],0";
    MOV(Memory(4), 0);
pc016: if (Tick()) return;
    register_pc_ = 16;
    VLOG(3) << "[16] MOV [5],0";
    MOV(Memory(5), 0);
pc017: if (Tick()) return;
    register_pc_ = 17;
    VLOG(3) << "[17] MOV [6],e";
    MOV(Memory(6), register_e_);
pc018: if (Tick()) return;
    register_pc_ = 18;
    VLOG(3) << "[18] SUB [6],g";
    SUB(Memory(6), register_g_);
pc019: if (Tick()) return;
    register_pc_ = 19;
    VLOG(3) << "[19] JGT 22,e,g";
    if (JGT(register_e_, register_g_)) goto pc022;
pc020: if (Tick()) return;
    register_pc_ = 20;
    VLOG(3) << "[20] MOV [6],g";
    MOV(Memory(6), register_g_);
pc021: if (Tick()) return;
    register_pc_ = 21;
    VLOG(3) << "[21] SUB [6],e";
    SUB(Memory(6), register_e_);
pc022: if (Tick()) return;
    register_pc_ = 22;
    VLOG(3) << "[22] MOV [100],f";
    MOV(Memory(100), register_f_);
pc023: if (Tick()) return;
    register_pc_ = 23;
    VLOG(3) << "[23] SUB [100],h";
    SUB(Memory(100), register_h_);
pc024: if (Tick()) return;
    register_pc_ = 24;
    VLOG(3) << "[24] JGT 27,f,h";
    if (JGT(register_f_, register_h_)) goto pc027;
pc025: if (Tick()) return;
    register_pc_ = 25;
    VLOG(3) << "[25] MOV [100],h";
    MOV(Memory(100), register_h_);
pc026: if (Tick()) return;
    register_pc_ = 26;
    VLOG(3) << "[26] SUB [100],f";
    SUB(Memory(100), register_f_);
pc027: if (Tick()) return;
    register_pc_ = 27;
    VLOG(3) << "[27] ADD [6],[100]";
    ADD(Memory(6), Memory(100));
pc028: if (Tick()) return;
    register_pc_ = 28;
    VLOG(3) << "[28] MOV d,100";
    MOV(register_d_, 100);
pc029: if (Tick()) return;
    register_pc_ = 29;
    VLOG(3) << "[29] MOV a,g";
    MOV(register_a_, register_g_);
pc030: if (Tick()) return;
    register_pc_ = 30;
    VLOG(3) << "[30] MOV b,h";
    MOV(register_b_, register_h_);
pc031: if (Tick()) return;
    register_pc_ = 31;
    VLOG(3) << "[31] SUB b,1";
    SUB(register_b_, 1);
pc032: if (Tick()) return;
    register_pc_ = 32;
    VLOG(3) << "[32] INT 7";
    INT7();
pc033: if (Tick()) return;
    register_pc_ = 33;
    VLOG(3) << "[33] JEQ 51,a,0";
    if (JEQ(register_a_, 0)) goto pc051;
pc034: if (Tick()) return;
    register_pc_ = 34;
    VLOG(3) << "[34] JEQ 51,[3],0";
    if (JEQ(Memory(3), 0)) goto pc051;
pc035: if (Tick()) return;
    register_pc_ = 35;
    VLOG(3) << "[35] MOV [100],0";
    MOV(Memory(100), 0);
pc036: if (Tick()) return;
    register_pc_ = 36;
    VLOG(3) << "[36] JGT 45,f,h";
    if (JGT(register_f_, register_h_)) goto pc045;
pc037: if (Tick()) return;
    register_pc_ = 37;
    VLOG(3) << "[37] MOV [100],h";
    MOV(Memory(100), register_h_);
pc038: if (Tick()) return;
    register_pc_ = 38;
    VLOG(3) << "[38] SUB [100],f";
    SUB(Memory(100), register_f_);
pc039: if (Tick()) return;
    register_pc_ = 39;
    VLOG(3) << "[39] JGT 44,[6],10";
    if (JGT(Memory(6), 10)) goto pc044;
pc040: if (Tick()) return;
    register_pc_ = 40;
    VLOG(3) << "[40] SUB d,20";
    SUB(register_d_, 20);
pc041: if (Tick()) return;
    register_pc_ = 41;
    VLOG(3) << "[41] INT 3";
    INT3();
pc042: if (Tick()) return;
    register_pc_ = 42;
    VLOG(3) << "[42] INT 6";
    INT6();
pc043: if (Tick()) return;
    register_pc_ = 43;
    VLOG(3) << "[43] JEQ 45,a,1";
    if (JEQ(register_a_, 1)) goto pc045;
pc044: if (Tick()) return;
    register_pc_ = 44;
    VLOG(3) << "[44] ADD d,40";
    ADD(register_d_, 40);
pc045: if (Tick()) return;
    register_pc_ = 45;
    VLOG(3) << "[45] JLT 51,d,[4]";
    if (JLT(register_d_, Memory(4))) goto pc051;
pc046: if (Tick()) return;
    register_pc_ = 46;
    VLOG(3) << "[46] JGT 48,d,[4]";
    if (JGT(register_d_, Memory(4))) goto pc048;
pc047: if (Tick()) return;
    register_pc_ = 47;
    VLOG(3) << "[47] JLT 51,[100],[5]";
    if (JLT(Memory(100), Memory(5))) goto pc051;
pc048: if (Tick()) return;
    register_pc_ = 48;
    VLOG(3) << "[48] MOV [1],0";
    MOV(Memory(1), 0);
pc049: if (Tick()) return;
    register_pc_ = 49;
    VLOG(3) << "[49] MOV [4],d";
    MOV(Memory(4), register_d_);
pc050: if (Tick()) return;
    register_pc_ = 50;
    VLOG(3) << "[50] MOV [5],[100]";
    MOV(Memory(5), Memory(100));
pc051: if (Tick()) return;
    register_pc_ = 51;
    VLOG(3) << "[51] MOV d,100";
    MOV(register_d_, 100);
pc052: if (Tick()) return;
    register_pc_ = 52;
    VLOG(3) << "[52] MOV a,g";
    MOV(register_a_, register_g_);
pc053: if (Tick()) return;
    register_pc_ = 53;
    VLOG(3) << "[53] MOV b,h";
    MOV(register_b_, register_h_);
pc054: if (Tick()) return;
    register_pc_ = 54;
    VLOG(3) << "[54] ADD a,1";
    ADD(register_a_, 1);
pc055: if (Tick()) return;
    register_pc_ = 55;
    VLOG(3) << "[55] INT 7";
    INT7();
pc056: if (Tick()) return;
    register_pc_ = 56;
    VLOG(3) << "[56] JEQ 74,a,0";
    if (JEQ(register_a_, 0)) goto pc074;
pc057: if (Tick()) return;
    register_pc_ = 57;
    VLOG(3) << "[57] JEQ 74,[3],1";
    if (JEQ(Memory(3), 1)) goto pc074;
pc058: if (Tick()) return;
    register_pc_ = 58;
    VLOG(3) << "[58] MOV [100],0";
    MOV(Memory(100), 0);
pc059: if (Tick()) return;
    register_pc_ = 59;
    VLOG(3) << "[59] JLT 68,e,g";
    if (JLT(register_e_, register_g_)) goto pc068;
pc060: if (Tick()) return;
    register_pc_ = 60;
    VLOG(3) << "[60] MOV [100],e";
    MOV(Memory(100), register_e_);
pc061: if (Tick()) return;
    register_pc_ = 61;
    VLOG(3) << "[61] SUB [100],g";
    SUB(Memory(100), register_g_);
pc062: if (Tick()) return;
    register_pc_ = 62;
    VLOG(3) << "[62] JGT 67,[6],10";
    if (JGT(Memory(6), 10)) goto pc067;
pc063: if (Tick()) return;
    register_pc_ = 63;
    VLOG(3) << "[63] SUB d,20";
    SUB(register_d_, 20);
pc064: if (Tick()) return;
    register_pc_ = 64;
    VLOG(3) << "[64] INT 3";
    INT3();
pc065: if (Tick()) return;
    register_pc_ = 65;
    VLOG(3) << "[65] INT 6";
    INT6();
pc066: if (Tick()) return;
    register_pc_ = 66;
    VLOG(3) << "[66] JEQ 68,a,1";
    if (JEQ(register_a_, 1)) goto pc068;
pc067: if (Tick()) return;
    register_pc_ = 67;
    VLOG(3) << "[67] ADD d,40";
    ADD(register_d_, 40);
pc068: if (Tick()) return;
    register_pc_ = 68;
    VLOG(3) << "[68] JLT 74,d,[4]";
    if (JLT(register_d_, Memory(4))) goto pc074;
pc069: if (Tick()) return;
    register_pc_ = 69;
    VLOG(3) << "[69] JGT 71,d,[4]";
    if (JGT(register_d_, Memory(4))) goto pc071;
pc070: if (Tick()) return;
    register_pc_ = 70;
    VLOG(3) << "[70] JLT 74,[100],[5]";
    if (JLT(Memory(100), Memory(5))) goto pc074;
pc071: if (Tick()) return;
    register_pc_ = 71;
    VLOG(3) << "[71] MOV [1],1";
    MOV(Memory(1), 1);
pc072: if (Tick()) return;
    register_pc_ = 72;
    VLOG(3) << "[72] MOV [4],d";
    MOV(Memory(4), register_d_);
pc073: if (Tick()) return;
    register_pc_ = 73;
    VLOG(3) << "[73] MOV [5],[100]";
    MOV(Memory(5), Memory(100));
pc074: if (Tick()) return;
    register_pc_ = 74;
    VLOG(3) << "[74] MOV d,100";
    MOV(register_d_, 100);
pc075: if (Tick()) return;
    register_pc_ = 75;
    VLOG(3) << "[75] MOV a,g";
    MOV(register_a_, register_g_);
pc076: if (Tick()) return;
    register_pc_ = 76;
    VLOG(3) << "[76] MOV b,h";
    MOV(register_b_, register_h_);
pc077: if (Tick()) return;
    register_pc_ = 77;
    VLOG(3) << "[77] ADD b,1";
    ADD(register_b_, 1);
pc078: if (Tick()) return;
    register_pc_ = 78;
    VLOG(3) << "[78] INT 7";
    INT7();
pc079: if (Tick()) return;
    register_pc_ = 79;
    VLOG(3) << "[79] JEQ 97,a,0";
    if (JEQ(register_a_, 0)) goto pc097;
pc080: if (Tick()) return;
    register_pc_ = 80;
    VLOG(3) << "[80] JEQ 97,[3],2";
    if (JEQ(Memory(3), 2)) goto pc097;
pc081: if (Tick()) return;
    register_pc_ = 81;
    VLOG(3) << "[81] MOV [100],0";
    MOV(Memory(100), 0);
pc082: if (Tick()) return;
    register_pc_ = 82;
    VLOG(3) << "[82] JLT 91,f,h";
    if (JLT(register_f_, register_h_)) goto pc091;
pc083: if (Tick()) return;
    register_pc_ = 83;
    VLOG(3) << "[83] MOV [100],f";
    MOV(Memory(100), register_f_);
pc084: if (Tick()) return;
    register_pc_ = 84;
    VLOG(3) << "[84] SUB [100],h";
    SUB(Memory(100), register_h_);
pc085: if (Tick()) return;
    register_pc_ = 85;
    VLOG(3) << "[85] JGT 90,[6],10";
    if (JGT(Memory(6), 10)) goto pc090;
pc086: if (Tick()) return;
    register_pc_ = 86;
    VLOG(3) << "[86] SUB d,20";
    SUB(register_d_, 20);
pc087: if (Tick()) return;
    register_pc_ = 87;
    VLOG(3) << "[87] INT 3";
    INT3();
pc088: if (Tick()) return;
    register_pc_ = 88;
    VLOG(3) << "[88] INT 6";
    INT6();
pc089: if (Tick()) return;
    register_pc_ = 89;
    VLOG(3) << "[89] JEQ 91,a,1";
    if (JEQ(register_a_, 1)) goto pc091;
pc090: if (Tick()) return;
    register_pc_ = 90;
    VLOG(3) << "[90] ADD d,40";
    ADD(register_d_, 40);
pc091: if (Tick()) return;
    register_pc_ = 91;
    VLOG(3) << "[91] JLT 97,d,[4]";
    if (JLT(register_d_, Memory(4))) goto pc097;
pc092: if (Tick()) return;
    register_pc_ = 92;
    VLOG(3) << "[92] JGT 94,d,[4]";
    if (JGT(register_d_, Memory(4))) goto pc094;
pc093: if (Tick()) return;
    register_pc_ = 93;
    VLOG(3) << "[93] JLT 97,[100],[5]";
    if (JLT(Memory(100), Memory(5))) goto pc097;
pc094: if (Tick()) return;
    register_pc_ = 94;
    VLOG(3) << "[94] MOV [1],2";
    MOV(Memory(1), 2);
pc095: if (Tick()) return;
    register_pc_ = 95;
    VLOG(3) << "[95] MOV [4],d";
    MOV(Memory(4), register_d_);
pc096: if (Tick()) return;
    register_pc_ = 96;
    VLOG(3) << "[96] MOV [5],[100]";
    MOV(Memory(5), Memory(100));
pc097: if (Tick()) return;
    register_pc_ = 97;
    VLOG(3) << "[97] MOV d,100";
    MOV(register_d_, 100);
pc098: if (Tick()) return;
    register_pc_ = 98;
    VLOG(3) << "[98] MOV a,g";
    MOV(register_a_, register_g_);
pc099: if (Tick()) return;
    register_pc_ = 99;
    VLOG(3) << "[99] MOV b,h";
    MOV(register_b_, register_h_);
pc100: if (Tick()) return;
    register_pc_ = 100;
    VLOG(3) << "[100] SUB a,1";
    SUB(register_a_, 1);
pc101: if (Tick()) return;
    register_pc_ = 101;
    VLOG(3) << "[101] INT 7";
    INT7();
pc102: if (Tick()) return;
    register_pc_ = 102;
    VLOG(3) << "[102] JEQ 120,a,0";
    if (JEQ(register_a_, 0)) goto pc120;
pc103: if (Tick()) return;
    register_pc_ = 103;
    VLOG(3) << "[103] JEQ 120,[3],3";
    if (JEQ(Memory(3), 3)) goto pc120;
pc104: if (Tick()) return;
    register_pc_ = 104;
    VLOG(3) << "[104] MOV [100],0";
    MOV(Memory(100), 0);
pc105: if (Tick()) return;
    register_pc_ = 105;
    VLOG(3) << "[105] JGT 114,e,g";
    if (JGT(register_e_, register_g_)) goto pc114;
pc106: if (Tick()) return;
    register_pc_ = 106;
    VLOG(3) << "[106] MOV [100],g";
    MOV(Memory(100), register_g_);
pc107: if (Tick()) return;
    register_pc_ = 107;
    VLOG(3) << "[107] SUB [100],e";
    SUB(Memory(100), register_e_);
pc108: if (Tick()) return;
    register_pc_ = 108;
    VLOG(3) << "[108] JGT 113,[6],10";
    if (JGT(Memory(6), 10)) goto pc113;
pc109: if (Tick()) return;
    register_pc_ = 109;
    VLOG(3) << "[109] SUB d,20";
    SUB(register_d_, 20);
pc110: if (Tick()) return;
    register_pc_ = 110;
    VLOG(3) << "[110] INT 3";
    INT3();
pc111: if (Tick()) return;
    register_pc_ = 111;
    VLOG(3) << "[111] INT 6";
    INT6();
pc112: if (Tick()) return;
    register_pc_ = 112;
    VLOG(3) << "[112] JEQ 114,a,1";
    if (JEQ(register_a_, 1)) goto pc114;
pc113: if (Tick()) return;
    register_pc_ = 113;
    VLOG(3) << "[113] ADD d,40";
    ADD(register_d_, 40);
pc114: if (Tick()) return;
    register_pc_ = 114;
    VLOG(3) << "[114] JLT 120,d,[4]";
    if (JLT(register_d_, Memory(4))) goto pc120;
pc115: if (Tick()) return;
    register_pc_ = 115;
    VLOG(3) << "[115] JGT 117,d,[4]";
    if (JGT(register_d_, Memory(4))) goto pc117;
pc116: if (Tick()) return;
    register_pc_ = 116;
    VLOG(3) << "[116] JLT 120,[100],[5]";
    if (JLT(Memory(100), Memory(5))) goto pc120;
pc117: if (Tick()) return;
    register_pc_ = 117;
    VLOG(3) << "[117] MOV [1],3";
    MOV(Memory(1), 3);
pc118: if (Tick()) return;
    register_pc_ = 118;
    VLOG(3) << "[118] MOV [4],d";
    MOV(Memory(4), register_d_);
pc119: if (Tick()) return;
    register_pc_ = 119;
    VLOG(3) << "[119] MOV [5],[100]";
    MOV(Memory(5), Memory(100));
pc120: if (Tick()) return;
    register_pc_ = 120;
    VLOG(3) << "[120] MOV a,[1]";
    MOV(register_a_, Memory(1));
pc121: if (Tick()) return;
    register_pc_ = 121;
    VLOG(3) << "[121] INT 0";
    INT0();
pc122: if (Tick()) return;
    register_pc_ = 122;
    VLOG(3) << "[122] MOV d,[1]";
    MOV(register_d_, Memory(1));
pc123: if (Tick()) return;
    register_pc_ = 123;
    VLOG(3) << "[123] HLT";
    HLT();
  }
};

class iwi5GhostFactory : public ::GhostFactory {
 public:
  virtual ~iwi5GhostFactory() {}

  std::unique_ptr<::GhostInterface> Create() {
    return std::unique_ptr<::GhostInterface>(new iwi5Ghost());
  }
};

}  // namespace ghost

#endif  // GHOST_AI_IWI5_H_
