#!/bin/bash

source gbash.sh || exit 1

DEFINE_string lman 'chokudai-10' 'LambaMan AIs.'
DEFINE_string ghosts 'chokudai' 'Ghost AIs.'
DEFINE_string maze 'world-classic' 'Maze.'
DEFINE_bool build true 'Build files.'
DEFINE_string evaluate '' 'Target to evaluate.'

gbash::init_google "$@"
set -- "${GBASH_ARGV[@]}"
set -e -u

icfpc-pull

FindAi() {
  local character="$1"
  local name="$2"

  local extension=cpp
  if [ "${character}" == 'ghost' ]; then
    extension=ghc
  fi
  local dropbox_file="/cloud/ro/dropbox/icfpc/2014/ai/${character}/${name}.${extension}"
  local code_file="$(eval echo -n "${HOME}/code/depot/${character}/ai/${name}.${extension}")"

  if [ -f "${dropbox_file}" ]; then
    echo "use an AI in Dropbox: ${character}/${name}" >&2
    cp "${dropbox_file}" "${code_file}"
  elif [ -f "${code_file}" ]; then
    echo "use an AI in Github: ${character}/${name}" >&2
  else
    echo "no such AI: ${character}/${name}" >&2
    echo "candidate paths are: " >&2
    echo "  ${dropbox_file}" >&2
    echo "  ${code_file}" >&2
    exit 2
  fi
}

IFS=, lman=($FLAGS_lman)
for lambda_man in "${lman[@]}"; do
  FindAi lman "${lambda_man}"
done
IFS=, ghosts=($FLAGS_ghosts)
for ghost in "${ghosts[@]}"; do
  FindAi ghost "${ghost}"
done

if [ -f "/cloud/ro/dropbox/icfpc/2014/maze/${FLAGS_maze}.txt" ]; then
  maze="/cloud/ro/dropbox/icfpc/2014/maze/${FLAGS_maze}.txt"
elif [ -f "/code/maze/${FLAGS_maze}.txt" ]; then
  maze="${HOME}/code/maze/${FLAGS_maze}.txt"
else
  echo "no such maze: ${FLAGS_maze}" >&2
  exit 2
fi

cd ~/code
./depot/lman/ai/generator
./depot/ghost/ai/generator

if (( FLAGS_build )); then
  make build/flame-binary/depot/sim/sim_main
fi

if [ "${FLAGS_evaluate}" == '' ]; then
  ./build/flame-binary/depot/sim/sim_main \
      --lman="${FLAGS_lman}" --ghosts="${FLAGS_ghosts}" --maze="${maze}" "$@"
  exit
else
  pushd ./build/flame-binary/depot/sim
  for file in *; do
    if [ "${file}" != 'sim_main' ]; then rm -rf "${file}"; fi
  done
  package_id="$(ipkg archive ./sim_main)"
  echo "package ID is ${package_id}" >&2
  popd
  # Warm cache.
  echo 'Warming cache...' >&2
  ninecluster-run "${package_id}" -- ls -lA </dev/null &
  wait
  echo 'Generating args...' >&2
  stats_args.sh "${FLAGS_lman}" >"${TMPDIR}/simulator-args"
  echo 'Candidate args:' >&2
  cat "${TMPDIR}/simulator-args" >&2
  while read line; do
    echo "Running $line..." >&2
    ninecluster-run "${package_id}" -- ./sim_main $line </dev/null &
    OnExit "kill -INT $! 2>/dev/null || true"
  done <"${TMPDIR}/simulator-args"
fi

wait
